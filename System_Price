
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import plotly.express as px
import numpy as np
from statsmodels.tsa.seasonal import seasonal_decompose

df = pd.read_excel("System2018DKK.xls")

#pivoting tables
#df = pd.read_excel("System20201.xls")
# Melt the DataFrame to unpivot the table, with the correct name for the date column
#df_melted = df.melt(id_vars=["TimeStep"], var_name="Hour", value_name="systemPrice")
# Combine the 'TimeStep' and 'Hour' into a single DateTime column
#df_melted['DateTime'] = pd.to_datetime(df_melted['TimeStep']) + pd.to_timedelta(df_melted['Hour'].astype(int) - 1, unit='h')
# Drop the unnecessary 'TimeStep' and 'Hour' columns
#df_final = df_melted.drop(columns=['TimeStep', 'Hour'])
# Reorder the DataFrame to have 'DateTime' first
#df_final = df_final[['DateTime', 'systemPrice']]
# Display the final DataFrame
#df_final.head(24)  # Display the first 24 hours to verify the output
# To arrange the data in chronological order, we will sort the DataFrame by the 'DateTime' column
#df_chronological = df_final.sort_values(by='DateTime')
# Resetting the index to reflect the new ordering
#df_chronological = df_chronological.reset_index(drop=True)
#df_chronological.head(96)  # Display the first 96 hours to cover the first four days
#df_chronological.to_excel("system2020pivot.xlsx")


#Combining all years into one file
df_2018 = pd.read_excel("system2018pivot.xlsx")
df_2019 = pd.read_excel("system2019pivot.xlsx")
df_2020 = pd.read_excel("system2020pivot.xlsx")
df_2021 = pd.read_excel("system2021pivot.xlsx")
df_2022 = pd.read_excel("system2022pivot.xlsx")
df_2023 = pd.read_excel("system2023pivot.xlsx")

#Changing 2019 into DKK/Mwh
#Exchange rates EUR DKK: https://www.exchangerates.org.uk/DKK-EUR-exchange-rate-history.html

#Exchange Rates DKK to EUR
#Year 2018 and 2019 Are already in EUR
average_exchange_rate_2020 = 0.1341
average_exchange_rate_2021 = 0.1345
average_exchange_rate_2022 = 0.1344
average_exchange_rate_2023 = 0.1341
#Convert DKK to EUR
df_2020["systemPrice"] = df_2020["systemPrice"] * average_exchange_rate_2020
df_2021["systemPrice"] = df_2021["systemPrice"] * average_exchange_rate_2021
df_2022["systemPrice"] = df_2022["systemPrice"] * average_exchange_rate_2022
df_2023["systemPrice"] = df_2023["systemPrice"] * average_exchange_rate_2023

# Concatenate the dataframes
combined_df = pd.concat([df_2018, df_2019, df_2020, df_2021, df_2022, df_2023])



# Optional: Sort by 'DateTime' if needed
combined_df = combined_df.sort_values(by='DateTime')

